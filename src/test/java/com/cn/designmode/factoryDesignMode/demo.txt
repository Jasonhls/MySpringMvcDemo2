简单工厂模式：
特点
1 它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。
2 create()方法通常是静态的，所以也称之为静态工厂。

缺点
1 扩展性差（我想增加一种面条，除了新增一个面条产品类，还需要修改工厂类方法）
2 不同的产品需要不同额外参数的时候 不支持。


工厂方法模式：
提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。
适用场景：
        消费者不关心它所要创建对象的类(产品类)的时候。
消费者知道它所要创建对象的类(产品类)，但不关心如何创建的时候。


抽象工厂模式：
优点：
        抽象工厂模式除了具有工厂方法模式的优点外，最主要的优点就是可以在类的内部对产品族进行约束。
所谓的产品族，一般或多或少的都存在一定的关联，抽象工厂模式就可以在类内部对产品族的关联关系进行定义和描述，
而不必专门引入一个新的类来进行管理
缺点：
       产品族的扩展将是一件十分费力的事情，假如产品族中需要增加一个新的产品，
则几乎所有的工厂类都需要进行修改。所以使用抽象工厂模式时，对产品等级结构的划分是非常重要的。
适用场景
       当需要创建的对象是一系列相互关联或相互依赖的产品族时，便可以使用抽象工厂模式。
说的更明白一点，就是一个继承体系中，如果存在着多个等级结构（即存在着多个抽象类），
并且分属各个等级结构中的实现类之间存在着一定的关联或者约束，就可以使用抽象工厂模式。
假如各个等级结构中的实现类之间不存在关联或约束，
则使用多个独立的工厂来对产品进行创建，则更合适一点。