NIO的工作流程：
服务端：
1、创建ServerSocketChannel通道对象，是所有客户端通道的父通道，专门用于负责处理客户端的连接请求。
2、绑定服务器监听端口，设置是否阻塞模式。
3、创建多路复用选择器Selector对象，可以创建一个或者多个。
4、将ServerSocketChannel以及监听的客户端连接时间（ACCEPT事件）一起注册到Selector上（只需要监听ACCEPT事件即可，专门用于
处理客户端的连接请求，至于和客户端读写数据的交互再另外创建通道实现）。
5、死循环不停的轮询Selector上注册的所有的通道是否触发了注册的事件。
    5.1、通过调用Selector的select()方法，该方法会阻塞当前线程，直到至少有一个注册的通道触发了对应的事件才会取消阻塞，然后通过SelectedKeys方法
    获取所有触发了事件的通道。
    5.2、遍历所有的SelectionKey，根据触发的事件的类型，进行不同的处理。
6、当监听到客户端连接事件之后，为客户端创建SocketChannel用于TCP数据通信，并且将该通道和可读事件(ON_READ)注册到Selector上。
7、当监听到客户端可读事件之后，表示客户端向服务器发送数据，那么为该通道创建一定大小的缓冲区，将通道中的数据写入到缓冲区。
8、业务处理逻辑从缓冲区读取客户端发送来的数据，进行解析和业务处理。
9、服务器通过调用Channel的write方法回写数据存入buffer中，（不需要关闭channel，channel是客户端断开了连接之后，服务端会接受到
ON_READ事件，然后报错就知道channel断开了）。
客户端：
1、创建SocketChannel通道对象，并绑定服务器IP和端口信息进行连接请求。
2、直接通过缓冲区向服务器发送数据。
3、直接尝试从通道中读取数据发到缓冲区。